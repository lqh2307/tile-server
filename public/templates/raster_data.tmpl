<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="{{base_url}}/leaflet.css" />
  <script src="{{base_url}}/leaflet.js"></script>
  <script src="{{base_url}}/leaflet-hash.js"></script>
</head>

<body style="margin:0;padding:0;font-family:Arial,Helvetica,sans-serif;">
  <div id="map" style="position:absolute;top:0;left:0;right:0;bottom:0;"></div>

  <script>
    const baseURL = "{{base_url}}";

    const map = L.map("map", {
      zoomControl: false
    });

    new L.Control.Zoom({
      position: "topright",
    }).addTo(map);

    fetch(`${baseURL}/datas/{{id}}.json`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    })
      .then((response) => {
        if (response.status === 200) {
          return response.json();
        } else {
          alert(`Failed to fetch tileJSON: Status code: ${response.status} - ${response.statusText}`);
        }
      })
      .then((jsonResponse) => {
        for (const tile of jsonResponse.tiles || []) {
          L.tileLayer(tile, {
            minZoom: jsonResponse.minzoom,
            maxZoom: jsonResponse.maxzoom,
            maxNativeZoom: 22,
            attribution: jsonResponse.attribution
          }).addTo(map);
        }

        if (jsonResponse.cacheBBoxs) {
          const cacheBBoxsLayer = L.polygon(
            jsonResponse.cacheBBoxs.map((bbox) => [
              [
                [bbox[1], bbox[0]],
                [bbox[1], bbox[2]],
                [bbox[3], bbox[2]],
                [bbox[3], bbox[0]],
                [bbox[1], bbox[0]]
              ]
            ]), {
              color: "rgba(255, 0, 0, 1)",
              weight: 2,
              fillOpacity: 0
            });

          const cacheBBoxsButton = Object.assign(
            document.createElement("div"), {
            innerHTML: "Show cache BBoxs",
            style: {
              position: "absolute",
              top: "10px",
              left: "10px",
              padding: "5px 10px",
              fontSize: "14px",
              cursor: "pointer",
              backgroundColor: "rgba(0, 150, 255, 0.5)",
              color: "white",
              border: "none",
              borderRadius: "5px",
              display: "inline-block",
              alignItems: "center",
              zIndex: 1000
            }
          });

          let isVisible = false;

          cacheBBoxsButton.onclick = () => {
            if (isVisible === true) {
              map.removeLayer(cacheBBoxsLayer);
              cacheBBoxsButton.innerHTML = "Show cache BBoxs";

              isVisible = false;
            } else {
              cacheBBoxsLayer.addTo(map);
              cacheBBoxsButton.innerHTML = "Hide cache BBoxs";

              isVisible = true;
            }
          };

          document.body.appendChild(cacheBBoxsButton);
        }
      })
      .catch((error) => {
        alert(`Failed to fetch tileJSON: Status code: ${error.message}`);
      });

    setTimeout(() => {
      new L.Hash(map);
    }, 0);

    let currentMarker;

    map.on("click", (event) => {
      if (currentMarker) {
        map.removeLayer(currentMarker);
      }

      currentMarker = L.marker([event.latlng.lat, event.latlng.lng]).addTo(map);

      alert(`Position: [${event.latlng.lng}, ${event.latlng.lat}]`);
    });
  </script>
</body>

</html>