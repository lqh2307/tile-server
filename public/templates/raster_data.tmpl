<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="{{base_url}}/leaflet.css" />
  <script src="{{base_url}}/leaflet.js"></script>
  <script src="{{base_url}}/leaflet-hash.js"></script>
</head>

<body style="margin:0;padding:0;font-family:Arial,Helvetica,sans-serif;">
  <div id="map" style="position:absolute;top:0;left:0;right:0;bottom:0;"></div>

  <script>
    const baseURL = "{{base_url}}";
    const id = "{{id}}";

    fetch(`${baseURL}/datas/${id}.json`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      })
      .then((response) => {
        if (response.status === 200) {
          return response.json();
        } else {
          alert(`Failed to fetch tileJSON: Status code: ${response.status} - ${response.statusText}`);
        }
      })
      .then((jsonResponse) => {
        const map = L.map("map", {
          zoomControl: false
        });

        new L.Control.Zoom({
          position: "topright",
        }).addTo(map);

        setTimeout(() => {
          new L.Hash(map);
        }, 0);

        for (const tile of jsonResponse.tiles || []) {
          L.tileLayer(tile, {
            minZoom: jsonResponse.minzoom,
            maxZoom: jsonResponse.maxzoom,
            maxNativeZoom: 22,
            attribution: jsonResponse.attribution
          }).addTo(map);
        }

        if (jsonResponse.cacheBBoxs !== undefined) {
          const cacheBBoxsLayer = L.geoJSON({
            type: "MultiLineString",
            coordinates: jsonResponse.cacheBBoxs.map((bbox) => {
              return [
                [bbox[0], bbox[1]],
                [bbox[2], bbox[1]],
                [bbox[2], bbox[3]],
                [bbox[0], bbox[3]],
                [bbox[0], bbox[1]]
              ];
            })
          }, {
            weight: 1,
            color: "rgba(255, 0, 0, 0.6)"
          });

          cacheBBoxsLayer.addTo(map);

          const cacheBBoxsButton = document.createElement("div");
          cacheBBoxsButton.innerHTML = "Hide cache BBoxs";
          cacheBBoxsButton.style.cssText = "position:absolute;bottom:10px;left:10px;padding:5px 10px;font-size:14px;cursor:pointer;background-color:rgba(0, 150, 255, 0.5);color:white;border:none;border-radius:5px;display:inline-block;z-index:1000;";

          let isVisible = true;

          cacheBBoxsButton.onclick = () => {
            if (isVisible === true) {
              map.removeLayer(cacheBBoxsLayer);
              cacheBBoxsButton.innerHTML = "Show cache BBoxs";

              isVisible = false;
            } else {
              cacheBBoxsLayer.addTo(map);
              cacheBBoxsButton.innerHTML = "Hide cache BBoxs";

              isVisible = true;
            }
          };

          document.body.appendChild(cacheBBoxsButton);
        }

        let currentMarker;

        map.on("click", (event) => {
          if (currentMarker) {
            map.removeLayer(currentMarker);
          }

          currentMarker = L.marker([event.latlng.lat, event.latlng.lng]).addTo(map);

          alert(`Position: [${event.latlng.lng}, ${event.latlng.lat}]`);
        });
      })
      .catch((error) => {
        alert(`Failed to fetch tileJSON: Status code: ${error.message}`);
      });
  </script>
</body>

</html>