<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/leaflet.css" />
  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/leaflet.js"></script>
  <script src="{{base_url}}/leaflet-hash.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }
  </style>
</head>

<body>
  <h1 style="display:none;">{{name}}</h1>
  <div id="map"></div>
  <script>
    const preference = location.search.indexOf("raster") >= 0 ? "raster" : "vector";

    if (preference === "vector") {
      maplibregl.setRTLTextPlugin(`{{base_url}}/mapbox-gl-rtl-text.js`);

      const map = new maplibregl.Map({
        container: "map",
        style: `{{base_url}}/styles/{{id}}/style.json`,
        hash: true,
      });

      map.addControl(new maplibregl.NavigationControl({
        visualizePitch: true,
        showZoom: true,
        showCompass: true,
      }));

      map.on("click", (event) => {
        new maplibregl.Marker()
          .setLngLat([event.lngLat.lng, event.lngLat.lat])
          .addTo(map);

        alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);
      });
    } else {
      const map = L.map("map", {
        zoomControl: false,
      });

      new L.Control.Zoom({
        position: "topright",
      }).addTo(map);

      let tile_urls = [], tile_attribution, tile_minzoom, tile_maxzoom;

      const req = new XMLHttpRequest();
      req.overrideMimeType("application/json");
      req.open("GET", `{{base_url}}/styles/{{id}}.json`, true);
      req.onload = function () {
        const jsonResponse = JSON.parse(req.responseText);
        for (key in jsonResponse) {
          switch (key.toLowerCase()) {
            case "tiles":
              tile_urls = jsonResponse[key];

              break;
            case "attribution":
              tile_attribution = jsonResponse[key];

              break;
            case "minzoom":
              tile_minzoom = jsonResponse[key];

              break;
            case "maxzoom":
              tile_maxzoom = jsonResponse[key];

              break;
          }
        }

        for (tile_url in tile_urls) {
          L.tileLayer(tile_urls[tile_url], {
            tileSize: 256,
            minZoom: tile_minzoom,
            maxZoom: tile_maxzoom,
            attribution: tile_attribution,
          }).addTo(map);
        }

        map.eachLayer(function (layer) {
          // do not add scale prefix even if retina display is detected
          layer.scalePrefix = ".";
        });
      };

      req.send(null);

      setTimeout(function () {
        new L.Hash(map);
      }, 0);

      map.on("click", (event) => {
        L.marker([event.latlng.lat, event.latlng.lng]).addTo(map);

        alert(`Position: [${event.latlng.lng}, ${event.latlng.lat}]`);
      });
    }
  </script>
</body>

</html>