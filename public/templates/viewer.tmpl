<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/leaflet.css" />
  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/leaflet.js"></script>
  <script src="{{base_url}}/leaflet-hash.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }
  </style>
</head>

<body>
  <h1 style="display:none;">{{name}}</h1>
  <div id="map"></div>
  <script>
    const baseURL = "{{base_url}}";
    const preference = location.search.indexOf("raster") >= 0 ? "raster" : "vector";

    if (preference === "vector") {
      maplibregl.setRTLTextPlugin(`${baseURL}/mapbox-gl-rtl-text.js`);

      const map = new maplibregl.Map({
        container: "map",
        style: `${baseURL}/styles/{{id}}/style.json`,
        hash: true,
      });

      map.addControl(new maplibregl.NavigationControl({
        visualizePitch: true,
        showZoom: true,
        showCompass: true,
      }));

      let currentMarker;

      map.on("click", (event) => {
        if (currentMarker) {
          currentMarker.remove();
        }

        currentMarker = new maplibregl.Marker()
          .setLngLat([event.lngLat.lng, event.lngLat.lat])
          .addTo(map);

        alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);
      });
    } else {
      const map = L.map("map", {
        zoomControl: false,
      });

      new L.Control.Zoom({
        position: "topright",
      }).addTo(map);

      fetch(`${baseURL}/styles/{{id}}.json`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => {
          if (response.status === 200) {
            return response.json();
          } else {
            alert(`Failed to fetch tileJSON: Status code: ${response.status} - ${response.statusText}`);
          }
        })
        .then((jsonResponse) => {
          for (const tile of jsonResponse.tiles || []) {
            L.tileLayer(tile, {
              tileSize: 256,
              minZoom: jsonResponse.minzoom,
              maxZoom: jsonResponse.maxzoom,
              attribution: jsonResponse.attribution,
            }).addTo(map);
          }

          map.eachLayer(function (layer) {
            layer.scalePrefix = ".";
          });
        })
        .catch((error) => {
          alert(`Failed to fetch tileJSON: Status code: ${error.message}`);
        });

      setTimeout(function () {
        new L.Hash(map);
      }, 0);

      let currentMarker;

      map.on("click", (event) => {
        if (currentMarker) {
          map.removeLayer(currentMarker);
        }

        currentMarker = L.marker([event.latlng.lat, event.latlng.lng]).addTo(map);

        alert(`Position: [${event.latlng.lng}, ${event.latlng.lat}]`);
      });
    }
  </script>
</body>

</html>