<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="/maplibre-gl-inspect.css" />
  <link rel="stylesheet" type="text/css" href="/leaflet.css" />
  <script src="/maplibre-gl.js"></script>
  <script src="/maplibre-gl-inspect.js"></script>
  <script src="/leaflet.js"></script>
  <script src="/leaflet-hash.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }
    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }
    .leaflet-control-layers-toggle {
      background-image: url(/images/layers.png);
      width: 36px;
      height: 36px;
    }
    .leaflet-retina .leaflet-control-layers-toggle {
      background-image: url(/images/layers-2x.png);
      background-size: 26px 26px;
    }
    .leaflet-default-icon-path { /* used only in path-guessing heuristic, see L.Icon.Default */
      background-image: url(/images/marker-icon.png);
    }
  </style>
</head>
<body>
  <h1 style="display:none;">{{name}}</h1>
  <div id='map'></div>
  <script>
    function isWebglSupported() {
      if (window.WebGLRenderingContext) {
        const canvas = document.createElement('canvas');
        try {
          const context = canvas.getContext('webgl2') || canvas.getContext('webgl');
          if (context && typeof context.getParameter === 'function') {
            return true;
          }
        } catch (e) {
          // WebGL is supported, but disabled
        }
        return false;
      }
      // WebGL not supported
      return false;
    }

    const q = (location.search || '').substr(1).split('&');
    const preference =
      q.indexOf('vector') >= 0 ? 'vector' :
        (q.indexOf('raster') >= 0 ? 'raster' :
          (isWebglSupported() ? 'vector' : 'raster'));

    if (preference === 'vector') {
      maplibregl.setRTLTextPlugin('/mapbox-gl-rtl-text.js');

      const map = new maplibregl.Map({
        container: 'map',
        style: '/styles/{{id}}/style.json',
        hash: true,
        maxPitch: 85
      });

      map.addControl(new maplibregl.NavigationControl({
        visualizePitch: true,
        showZoom: true,
        showCompass: true
      }));

      map.addControl(new MaplibreInspect({
        showMapPopupOnHover: false,
        showInspectMapPopupOnHover: false,
        selectThreshold: 5
      }));
    } else {
      const map = L.map('map', {
        zoomControl: false,
      });

      new L.Control.Zoom({
        position: 'topright',
      }).addTo(map);

      let tile_urls = [], tile_attribution, tile_minzoom, tile_maxzoom;

      const req = new XMLHttpRequest();
      req.overrideMimeType("application/json");
      req.open('GET', '/styles/256/{{id}}.json', true);
      req.onload = function() {
        const jsonResponse = JSON.parse(req.responseText);
        for (key in jsonResponse) {
          switch(key.toLowerCase()) {
            case "tiles":
              tile_urls = jsonResponse[key];
              break;
            case "attribution":
              tile_attribution = jsonResponse[key];
              break;
            case "minzoom":
              tile_minzoom = jsonResponse[key];
              break;
            case "maxzoom":
              tile_maxzoom = jsonResponse[key];
              break;
          }
        }

        for (tile_url in tile_urls) {
          L.tileLayer(tile_urls[tile_url], {
            tileSize: 256,
            minZoom: tile_minzoom,
            maxZoom: tile_maxzoom,
            attribution: tile_attribution
          }).addTo(map);
        }

        map.eachLayer(function(layer) {
          // do not add scale prefix even if retina display is detected
          layer.scalePrefix = '.';
        });
      };

      req.send(null);

      setTimeout(function() {
        new L.Hash(map);
      }, 0);
    }
  </script>
</body>
</html>
