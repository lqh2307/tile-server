<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl-inspect.css" />
  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/maplibre-gl-inspect.js"></script>
</head>

<body style="margin:0;padding:0;font-family:Arial,Helvetica,sans-serif;">
  <h1 style="position:absolute;top:5px;right:0;width:240px;margin:0;font-size:18px;">Layer list</h1>
  <div id="map" style="position:absolute;top:0;left:0;right:250px;bottom:0;"></div>
  <div id="layerList" style="position:absolute;top:35px;right:0;bottom:0;width:240px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;"></div>

  <script>
    const baseURL = "{{base_url}}";

    const map = new maplibregl.Map({
      container: "map",
      hash: true,
      style: {
        "version": 8,
        "sources": {
          "source": {
            "type": "vector",
            "url": `${baseURL}/datas/{{id}}.json`
          }
        },
        "layers": []
      }
    });

    map.addControl(new maplibregl.NavigationControl({
      visualizePitch: true
    }));

    const inspect = new MaplibreInspect({
      showInspectMap: true,
      showInspectButton: false
    });

    map.addControl(inspect);

    map.on("load", () => {
      const layerList = document.getElementById("layerList");

      Object.keys(inspect.sources).forEach((sourceId) => {
        inspect.sources[sourceId].forEach((layerId) => {
          const item = document.createElement("div");

          const layerColor = inspect.assignLayerColor(layerId);

          item.innerHTML = `
            <div style="display:flex;align-items:center;cursor:pointer;">
              <div style="width:15px;height:15px;display:inline-block;background:${layerColor};"></div>
              <span style="margin-left:5px;color:${layerColor};">${layerId}</span>
            </div>
          `;

          item.onclick = () => {
            const newVisibility = map.getLayoutProperty(`source_${layerId}_polygon`, "visibility") === "none" ? "visible" : "none";

            map.setLayoutProperty(`source_${layerId}_polygon`, "visibility", newVisibility);
            map.setLayoutProperty(`source_${layerId}_line`, "visibility", newVisibility);
            map.setLayoutProperty(`source_${layerId}_circle`, "visibility", newVisibility);

            item.style.textDecoration = newVisibility === "visible" ? "none" : "line-through";
          };

          layerList.appendChild(item);
        });
      });

      fetch(`${baseURL}/datas/{{id}}.json`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
      })
        .then((response) => {
          if (response.status === 200) {
            return response.json();
          } else {
            alert(`Failed to fetch tileJSON: Status code: ${response.status} - ${response.statusText}`);
          }
        })
        .then((jsonResponse) => {
          if (jsonResponse.cacheBBoxs) {
            map.addSource("cache_bboxs_source", {
              type: "geojson",
              data: {
                type: "MultiPolygon",
                coordinates: jsonResponse.cacheBBoxs.map((bbox) => {
                  return [
                    [
                      [bbox[0], bbox[1]],
                      [bbox[2], bbox[1]],
                      [bbox[2], bbox[3]],
                      [bbox[0], bbox[3]],
                      [bbox[0], bbox[1]]
                    ]
                  ];
                })
              }
            });

            map.addLayer({
              "id": "cache_bboxs_source_line",
              "source": "cache_bboxs_source",
              "type": "line",
              "paint": {
                "line-width": 2,
                "line-color": "rgba(255, 0, 0, 1)"
              },
              "layout": {
                "line-join": "round",
                "line-cap": "round",
                "visibility": "none"
              }
            });

            const cacheBBoxsButton = Object.assign(
              document.createElement("div"), {
              innerHTML: "Show cache BBoxs",
              style: {
                position: "absolute",
                top: "10px",
                left: "10px",
                padding: "5px 10px",
                fontSize: "14px",
                cursor: "pointer",
                backgroundColor: "rgba(0, 150, 255, 0.5)",
                color: "white",
                border: "none",
                borderRadius: "5px",
                textAlign: "center",
                display: "inline-block"
              }
            });

            cacheBBoxsButton.onclick = () => {
              const newVisibility = map.getLayoutProperty("cache_bboxs_source_line", "visibility") === "none" ? "visible" : "none";

              map.setLayoutProperty("cache_bboxs_source_line", "visibility", newVisibility);

              cacheBBoxsButton.innerHTML = newVisibility === "visible" ? "Hide cache BBoxs" : "Show cache BBoxs";
            };

            document.body.appendChild(cacheBBoxsButton);
          }
        })
        .catch((error) => {
          alert(`Failed to fetch tileJSON: Status code: ${error.message}`);
        });
    });

    let currentMarker;

    map.on("click", (event) => {
      if (currentMarker) {
        currentMarker.remove();
      }

      currentMarker = new maplibregl.Marker()
        .setLngLat([event.lngLat.lng, event.lngLat.lat])
        .addTo(map);

      alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);
    });
  </script>
</body>

</html>