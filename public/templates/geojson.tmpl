<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>{{layer}} - Tile Server</title>

  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl-inspect.css" />

  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial,Helvetica,sans-serif;
    }

    h1 {
      position:absolute;
      top:5px;
      right:0;
      width:240px;
      margin:0;
      font-size:18px;
    }

    #map {
      position:absolute;
      top:0;
      left:0;
      right:250px;
      bottom:0;
    }

    #layerList {
      position:absolute;
      top:35px;
      right:0;
      bottom:0;
      width:240px;
      max-height:100%;
      overflow-y:auto;
    }
  </style>

  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/maplibre-gl-inspect.js"></script>
</head>

<body>
  <h1>Layer list</h1>
  <div id="map"></div>
  <div id="layerList">

  <script>
    const baseURL = "{{base_url}}";
    const group = "{{group}}";
    const layer = "{{layer}}";

    fetch(`${baseURL}/geojsons/${group}/${layer}.json`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
      })
      .then((response) => {
        if (response.status === 200) {
          return response.json();
        } else {
          alert(`Failed to fetch GeoJSON info: Status code: ${response.status} - ${response.statusText}`);
        }
      })
      .then((jsonResponse) => {
        const style = {
          "version": 8,
          "sources": {},
          "layers": [
            {
              "id": "background",
              "type": "background",
              "paint": {
                "background-color": "#FFF"
              },
              "layout": {
                "visibility": "visible"
              }
            }
          ]
        };

        const layerColors = {};

        if (jsonResponse.geometryTypes.length > 0) {
          style.sources[layer] = {
            "type": "geojson",
            "data": jsonResponse.url
          };

          const r = Math.floor(Math.random() * 256);
          const g = Math.floor(Math.random() * 256);
          const b = Math.floor(Math.random() * 256);

          layerColors[layer] = `rgba(${r}, ${g}, ${b}, 1)`;

          const polygonGeometryIndex = jsonResponse.geometryTypes.indexOf("polygon");
          if (polygonGeometryIndex > -1) {
            style.layers.push(
              {
                "id": `${layer}_${jsonResponse.geometryTypes[polygonGeometryIndex]}`,
                "source": layer,
                "type": "fill",
                "paint": {
                  "fill-color": `rgba(${r}, ${g}, ${b}, 0.3)`,
                  "fill-antialias": true,
                  "fill-outline-color": `rgba(${r}, ${g}, ${b}, 0.3)`
                },
                "layout": {
                  "visibility": "visible"
                },
                "filter": ["==", "$type", "Polygon"]
              }
            );
          }

          const lineGeometryIndex = jsonResponse.geometryTypes.indexOf("line");
          if (lineGeometryIndex > -1) {
            style.layers.push(
              {
                "id": `${layer}_${jsonResponse.geometryTypes[lineGeometryIndex]}`,
                "source": layer,
                "type": "line",
                "paint": {
                  "line-color": `rgba(${r}, ${g}, ${b}, 0.6)`
                },
                "layout": {
                  "line-join": "round",
                  "line-cap": "round",
                  "visibility": "visible"
                },
                "filter": ["==", "$type", "LineString"]
              }
            );
          }

          const circleGeometryIndex = jsonResponse.geometryTypes.indexOf("circle");
          if (circleGeometryIndex > -1) {
            style.layers.push(
              {
                "id": `${layer}_${jsonResponse.geometryTypes[circleGeometryIndex]}`,
                "source": layer,
                "type": "circle",
                "paint": {
                  "circle-color": `rgba(${r}, ${g}, ${b}, 0.8)`,
                  "circle-radius": 2
                },
                "layout": {
                  "visibility": "visible"
                },
                "filter": ["==", "$type", "Point"]
              }
            );
          }
        } else {
          alert(`No geometry found in layer "${layer}". Skipping...`);
        }

        const map = new maplibregl.Map({
          container: "map",
          hash: true,
          style: style
        });

        map.addControl(new maplibregl.NavigationControl({
          visualizePitch: true
        }));

        map.addControl(new MaplibreInspect({
          showInspectMap: true,
          showInspectButton: false,
          useInspectStyle: false
        }));

        if (layerColors[layer] !== undefined) {
          map.on("load", () => {
            const layerList = document.getElementById("layerList");

            const item = document.createElement("div");

            item.innerHTML = `
              <div style="display:flex;align-items:center;cursor:pointer;">
                <div style="width:15px;height:15px;display:inline-block;background:${layerColors[layer]};"></div>
                <span style="margin-left:5px;color:${layerColors[layer]};display:inline-block;max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">${layer}</span>
              </div>
            `;

            item.onclick = () => {
              const newVisibility = map.getLayoutProperty(`${layer}_${jsonResponse.geometryTypes[0]}`, "visibility") === "none" ? "visible" : "none";

              jsonResponse.geometryTypes.forEach((geometryType) => {
                map.setLayoutProperty(`${layer}_${geometryType}`, "visibility", newVisibility);
              });

              item.style.textDecoration = newVisibility === "visible" ? "none" : "line-through";
            };

            layerList.appendChild(item);
          });
        }

        let currentMarker;

        map.on("click", (event) => {
          if (currentMarker) {
            currentMarker.remove();
          }

          currentMarker = new maplibregl.Marker({
            draggable: true
          })
            .setLngLat([event.lngLat.lng, event.lngLat.lat])
            .addTo(map);

          alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);

          currentMarker.on("dragend", () => {
            const lngLat = currentMarker.getLngLat();

            alert(`Position: [${lngLat.lng}, ${lngLat.lat}]`);
          });
        });

        map.on("contextmenu", (event) => {
          if (currentMarker) {
            currentMarker.remove();

            currentMarker = undefined;
          }
        });
      })
      .catch((error) => {
        alert(`Failed to fetch GeoJSON info: Status code: ${error.message}`);
      });
  </script>
</body>

</html>