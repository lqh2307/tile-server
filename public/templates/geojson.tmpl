<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - Tile Server</title>
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl.css" />
  <link rel="stylesheet" type="text/css" href="{{base_url}}/maplibre-gl-inspect.css" />
  <script src="{{base_url}}/maplibre-gl.js"></script>
  <script src="{{base_url}}/maplibre-gl-inspect.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, Helvetica, sans-serif;
    }

    #map {
      position: absolute;
      top: 0;
      left: 0;
      right: 250px;
      bottom: 0;
    }

    h1 {
      position: absolute;
      top: 5px;
      right: 0;
      width: 240px;
      margin: 0;
      line-height: 20px;
      font-size: 20px;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    #layerList {
      position: absolute;
      top: 35px;
      right: 0;
      bottom: 0;
      width: 240px;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
  </style>
</head>

<body>
  <h1>{{name}}</h1>
  <div id="map"></div>
  <div id="layerList"></div>
  <script>
    const baseURL = "{{base_url}}";

    const map = new maplibregl.Map({
      container: "map",
      hash: true,
      style: {
        "version": 8,
        "sources": {
          "source": {
            "type": "geojson",
            "data": `${baseURL}/geojsons/{{id}}/geojson.geojson`
          }
        },
        "layers": []
      }
    });

    map.addControl(new maplibregl.NavigationControl());

    map.addControl(new MaplibreInspect({
      showInspectMap: true,
      showInspectButton: false
    }));

    map.on("load", () => {
      const layerObj = [
        {
          name: "polygon",
          color: "rgba(255, 0, 0, 0.3)"
        },
        {
          name: "line",
          color: "rgba(0, 255, 0, 0.6)"
        },
        {
          name: "point",
          color: "rgba(0, 0, 255, 0.8)"
        }
      ];

      const layerList = document.getElementById("layerList");

      layerObj.forEach((layer) => {
        const item = document.createElement("div");

        if (layer.name === "polygon") {
          map.addLayer({
            "id": `source_${layer.name}`,
            "source": "source",
            "type": "fill",
            "paint": {
              "fill-color": layer.color,
              "fill-antialias": true,
              "fill-outline-color": layer.color
            },
            "layout": {
              "visibility": "visible"
            },
            "filter": ["==", "$type", "Polygon"]
          });
        } else if (layer.name === "line") {
          map.addLayer({
            "id": `source_${layer.name}`,
            "source": "source",
            "type": "line",
            "paint": {
              "line-color": layer.color
            },
            "layout": {
              "line-join": "round",
              "line-cap": "round",
              "visibility": "visible"
            },
            "filter": ["==", "$type", "LineString"]
          });
        } else if (layer.name === "point") {
          map.addLayer({
            "id": `source_${layer.name}`,
            "source": "source",
            "type": "circle",
            "paint": {
              "circle-color": layer.color,
              "circle-radius": 2
            },
            "layout": {
              "visibility": "visible"
            },
            "filter": ["==", "$type", "Point"]
          });
        }

        item.innerHTML = `
          <div style="display:flex;align-items:center;cursor:pointer;">
            <div style="width:15px;height:15px;display:inline-block;background:${layer.color};"></div>
            <span style="margin-left:5px;color:${layer.color};">${layer.name}</span>
          </div>
        `;

        item.onclick = () => {
          const visibility = map.getLayoutProperty(
            `source_${layer.name}`,
            "visibility"
          );

          const newVisibility = visibility === "none" ? "visible" : "none";

          map.setLayoutProperty(
            `source_${layer.name}`,
            "visibility",
            newVisibility
          );

          item.style.textDecoration = newVisibility === "visible" ? "none" : "line-through";
        };

        layerList.appendChild(item);
      })
    });

    let currentMarker;

    map.on("click", (event) => {
      if (currentMarker) {
        currentMarker.remove();
      }

      currentMarker = new maplibregl.Marker()
        .setLngLat([event.lngLat.lng, event.lngLat.lat])
        .addTo(map);

      alert(`Position: [${event.lngLat.lng}, ${event.lngLat.lat}]`);
    });
  </script>
</body>

</html>